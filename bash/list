# !/bin/bash

function list {
  local pkg_name=$1

  local found_pkgs=( ./results/$HAB_ORIGIN-$pkg_name-*.hart )

  if [ -z "$pkg_name" ] ; then
      echo "To list a package, I must know its name."
      echo ""
      echo " Try: $ list PKG_NAME"
      return 1
  fi


  if [ 0 = ${#found_pkgs[@]} ] ; then
      echo "No packages found."
      echo "* Is there a results directory?"
      echo "* Did you specify the name of the package correctly?"
      echo "* Did you build your package?"
      # echo "* Did you want me to build something first?"
      # echo "* In the results directory I found ..."
      # echo "* Did you mean?"
      return 1
  fi

  local pkg_count=${#found_pkgs[@]}

  declare -A indexed_pkgs

  echo "Listing $pkg_count package(s)"

  for i in ${!found_pkgs[@]}; do
      current_count=$((pkg_count-1-i))
      if [ $current_count == 0 ] ; then
        echo -e "$(say @b@red[[HEAD]])\t- ${found_pkgs[$i]} "
        indexed_pkgs+=([HEAD]=${found_pkgs[$i]})
      else
        local current_index="HEAD~$current_count"
        echo -e "$(say @b@white[[$current_index]])\t- ${found_pkgs[$i]} "
        indexed_pkgs+=([HEAD~$current_count]=${found_pkgs[$i]})
        indexed_pkgs+=([~$current_count]=${found_pkgs[$i]})
      fi
  done
}

say() {
    echo "$@" | sed \
            -e "s/\(\(@\(red\|green\|yellow\|blue\|magenta\|cyan\|white\|reset\|b\|u\)\)\+\)[[]\{2\}\(.*\)[]]\{2\}/\1\4@reset/g" \
            -e "s/@red/$(tput setaf 1)/g" \
            -e "s/@green/$(tput setaf 2)/g" \
            -e "s/@yellow/$(tput setaf 3)/g" \
            -e "s/@blue/$(tput setaf 4)/g" \
            -e "s/@magenta/$(tput setaf 5)/g" \
            -e "s/@cyan/$(tput setaf 6)/g" \
            -e "s/@white/$(tput setaf 7)/g" \
            -e "s/@reset/$(tput sgr0)/g" \
            -e "s/@b/$(tput bold)/g" \
            -e "s/@u/$(tput sgr 0 1)/g"
 }


list $@
